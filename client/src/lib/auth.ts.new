import React, { createContext, useContext, useState, useEffect } from "react";
import { User } from "./types";

export interface AuthContextType {
  user: User | null;
  isAuthenticated: boolean;
  isLoading: boolean;
  setUser: (user: User | null) => void;
}

export const AuthContext = createContext<AuthContextType | null>(null);

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error("useAuth must be used within an AuthProvider");
  }
  return context;
};

export const AuthProvider = ({ children }: { children: React.ReactNode }) => {
  const [user, setUser] = useState<User | null>(null);
  const [isLoading, setIsLoading] = useState<boolean>(true);

  // Check session on app load
  useEffect(() => {
    const checkAuth = async () => {
      try {
        console.log("Checking auth status...");
        const res = await fetch("/api/auth/check", {
          credentials: "include",
        });
        
        console.log("Auth check status:", res.status);
        
        if (res.ok) {
          const userData = await res.json();
          console.log("User is authenticated:", userData);
          setUser(userData);
        } else {
          console.log("User is not authenticated");
          setUser(null);
        }
      } catch (error) {
        console.error("Auth check error:", error);
        setUser(null);
      } finally {
        setIsLoading(false);
      }
    };

    checkAuth();
  }, []);

  const authContextValue: AuthContextType = {
    user,
    isAuthenticated: !!user,
    isLoading,
    setUser
  };

  return React.createElement(AuthContext.Provider, {
    value: authContextValue
  }, children);
};